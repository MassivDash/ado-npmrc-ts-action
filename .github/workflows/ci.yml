name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

      - name: npm audit report
        run: npm audit --json | npx @netly/npm-audit-markdown --output npm.md
      - name: 'Test'
        run: npm run coverage
      - name: Run project analyzer
        run: npm i -g project-analyzer && projectAnalyzer -m -t

      - name: 'Report Coverage'
        # Set if: always() to also generate the report if tests are failing
        # Only works if you set `reportOnFailure: true` in your vite config as specified above
        if: always()
        uses: davelosert/vitest-coverage-report-action@v2
      - name: Post coverage summary
        id: coverage_summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/cobertura-coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Npm audit report PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: npm.md

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      - name: Add Project Analysis PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: analysis.md

  test-action:
    name: GitHub Actions Test
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          AZURE_PASSWORD: password
          AZURE_REGISTRY_NAME: registry
          AZURE_ORGANIZATION: organization
          AZURE_PROJECT: project
          AZURE_USERNAME: username
          AZURE_EMAIL: email
          AZURE_REGISTRY_SCOPE: scope
          AZURE_ENCODE_PASSWORD: false

      - name: Check if file exists
        run: |
          if [ ! -f ".npmrc" ]; then
          echo "File does not exist!"
          exit 1
          fi
        shell: bash
        if: ${{ matrix.os != 'windows-latest' }}

      - name: Check if file exists
        run: |
          if (!(Test-Path ".npmrc")) {
          Write-Host "File does not exist!"
          exit 1
          }
        shell: powershell
        if: ${{ matrix.os == 'windows-latest' }}
